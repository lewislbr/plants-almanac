// Code generated by mockery (devel). DO NOT EDIT.

package user

import mock "github.com/stretchr/testify/mock"

// mockUserRepo is an autogenerated mock type for the userRepo type
type mockUserRepo struct {
	mock.Mock
}

// CheckExists provides a mock function with given fields: _a0
func (_m *mockUserRepo) CheckExists(_a0 string) (bool, error) {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: _a0
func (_m *mockUserRepo) Find(_a0 string) (User, error) {
	ret := _m.Called(_a0)

	var r0 User
	if rf, ok := ret.Get(0).(func(string) User); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInfo provides a mock function with given fields: _a0
func (_m *mockUserRepo) GetInfo(_a0 string) (Info, error) {
	ret := _m.Called(_a0)

	var r0 Info
	if rf, ok := ret.Get(0).(func(string) Info); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(Info)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: _a0
func (_m *mockUserRepo) Insert(_a0 User) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
