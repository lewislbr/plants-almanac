// Code generated by mockery (devel). DO NOT EDIT.

package server

import (
	user "lewislbr/plantdex/users/user"

	mock "github.com/stretchr/testify/mock"
)

// mockUserService is an autogenerated mock type for the userService type
type mockUserService struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: cred
func (_m *mockUserService) Authenticate(cred user.Credentials) (string, error) {
	ret := _m.Called(cred)

	var r0 string
	if rf, ok := ret.Get(0).(func(user.Credentials) string); ok {
		r0 = rf(cred)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(user.Credentials) error); ok {
		r1 = rf(cred)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: _a0
func (_m *mockUserService) Create(_a0 user.New) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(user.New) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Info provides a mock function with given fields: _a0
func (_m *mockUserService) Info(_a0 string) (user.Info, error) {
	ret := _m.Called(_a0)

	var r0 user.Info
	if rf, ok := ret.Get(0).(func(string) user.Info); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(user.Info)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
